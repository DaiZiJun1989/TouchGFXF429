// -alpha_dither yes -dither 2 -non_opaque_image_format ARGB8888 -opaque_image_format RGB565 0x545dcbb8
// Generated by imageconverter. Please, do not edit!

#include <touchgfx/Bitmap.hpp>
#include <BitmapDatabase.hpp>

#ifndef NO_USING_NAMESPACE_TOUCHGFX
using namespace touchgfx;
#endif

extern const unsigned char _bg[]; 
extern const unsigned char _blue_buttons_round_icon_button[]; 
extern const unsigned char _blue_buttons_round_icon_button_pressed[]; 
extern const unsigned char _blue_buttons_round_small[]; 
extern const unsigned char _blue_buttons_round_small_pressed[]; 
extern const unsigned char _blue_icons_add_new_32[]; 
extern const unsigned char _blue_slider_horizontal_large_indicators_slider_round_nob[]; 
extern const unsigned char _blue_slider_horizontal_large_slider_round_back[]; 
extern const unsigned char _blue_slider_horizontal_large_slider_round_fill[]; 
extern const unsigned char _blue_slider_vertical_medium_indicators_slider3_vertical_round_nob[]; 
extern const unsigned char _blue_slider_vertical_medium_slider3_vertical_round_back[]; 
extern const unsigned char _blue_slider_vertical_medium_slider3_vertical_round_fill[]; 
extern const unsigned char _blue_togglebars_toggle_re_small_button_off[]; 
extern const unsigned char _blue_togglebars_toggle_re_small_button_on[]; 
extern const unsigned char _blue_togglebars_toggle_round_large_button_off[]; 
extern const unsigned char _blue_togglebars_toggle_round_large_button_on[]; 
extern const unsigned char _counter_box[]; 
extern const unsigned char _down_btn[]; 
extern const unsigned char _down_btn_disabled[]; 
extern const unsigned char _down_btn_pressed[]; 
extern const unsigned char _up_btn[]; 
extern const unsigned char _up_btn_disabled[]; 
extern const unsigned char _up_btn_pressed[]; 

const touchgfx::Bitmap::BitmapData bitmap_database[] = {
    { _bg, 0, 480, 272, 0, 0, 480, 272, touchgfx::Bitmap::RGB565 },
    { _blue_buttons_round_icon_button, 0, 60, 60, 13, 11, 34, 36, touchgfx::Bitmap::ARGB8888 },
    { _blue_buttons_round_icon_button_pressed, 0, 60, 60, 13, 11, 34, 36, touchgfx::Bitmap::ARGB8888 },
    { _blue_buttons_round_small, 0, 170, 60, 23, 5, 124, 48, touchgfx::Bitmap::ARGB8888 },
    { _blue_buttons_round_small_pressed, 0, 170, 60, 23, 5, 124, 48, touchgfx::Bitmap::ARGB8888 },
    { _blue_icons_add_new_32, 0, 29, 29, 13, 10, 3, 9, touchgfx::Bitmap::ARGB8888 },
    { _blue_slider_horizontal_large_indicators_slider_round_nob, 0, 58, 58, 10, 9, 38, 38, touchgfx::Bitmap::ARGB8888 },
    { _blue_slider_horizontal_large_slider_round_back, 0, 672, 15, 7, 1, 658, 12, touchgfx::Bitmap::ARGB8888 },
    { _blue_slider_horizontal_large_slider_round_fill, 0, 672, 15, 7, 0, 658, 14, touchgfx::Bitmap::ARGB8888 },
    { _blue_slider_vertical_medium_indicators_slider3_vertical_round_nob, 0, 34, 54, 5, 7, 24, 38, touchgfx::Bitmap::ARGB8888 },
    { _blue_slider_vertical_medium_slider3_vertical_round_back, 0, 20, 332, 0, 10, 20, 312, touchgfx::Bitmap::ARGB8888 },
    { _blue_slider_vertical_medium_slider3_vertical_round_fill, 0, 20, 332, 0, 10, 20, 312, touchgfx::Bitmap::ARGB8888 },
    { _blue_togglebars_toggle_re_small_button_off, 0, 96, 38, 5, 1, 86, 36, touchgfx::Bitmap::ARGB8888 },
    { _blue_togglebars_toggle_re_small_button_on, 0, 96, 38, 5, 1, 86, 36, touchgfx::Bitmap::ARGB8888 },
    { _blue_togglebars_toggle_round_large_button_off, 0, 128, 38, 13, 1, 102, 36, touchgfx::Bitmap::ARGB8888 },
    { _blue_togglebars_toggle_round_large_button_on, 0, 128, 38, 13, 1, 102, 36, touchgfx::Bitmap::ARGB8888 },
    { _counter_box, 0, 152, 154, 0, 0, 152, 154, touchgfx::Bitmap::RGB565 },
    { _down_btn, 0, 130, 56, 3, 0, 124, 55, touchgfx::Bitmap::ARGB8888 },
    { _down_btn_disabled, 0, 130, 56, 3, 0, 124, 55, touchgfx::Bitmap::ARGB8888 },
    { _down_btn_pressed, 0, 130, 56, 3, 0, 124, 55, touchgfx::Bitmap::ARGB8888 },
    { _up_btn, 0, 130, 56, 3, 0, 124, 55, touchgfx::Bitmap::ARGB8888 },
    { _up_btn_disabled, 0, 130, 56, 3, 0, 124, 55, touchgfx::Bitmap::ARGB8888 },
    { _up_btn_pressed, 0, 130, 56, 3, 0, 124, 55, touchgfx::Bitmap::ARGB8888 }
};

namespace BitmapDatabase
{
  const touchgfx::Bitmap::BitmapData* getInstance()
  {
    return bitmap_database;
  }
  uint16_t getInstanceSize()
  {
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
  }
}

